#!/bin/bash
# Version 2.0 (BBK backoff) 
count=$(( ( RANDOM % 9999 )  + 100 ))
zone=x
ip_version=x
logtag=chprobe_bbk

# For global zone, if you want something else than hostname, then edit below
probename="$(hostname -d)"

# Link to bbk_api
bbk_apiurl="http://project-mayhem.se/probes/bbk_api.php"

# Functions and variables
localstatus="$(pgrep -f 'bbk_cli|iperf3' | wc -l)"
bbk_remotestatusv2="curl -m 3 -s -o /dev/null -w \"%{http_code}\" \$bbk_apiurl"
globalzone_url="http://project-mayhem.se/probes/bbkzone_$probename"

reinit_status () {
bbk_remoteurl="http://project-mayhem.se/probes/bbk_status_zone-$zone"
bbk_remotestatus="$(curl -m 3 -s -XGET $bbk_remoteurl)"
 }

setzone () { 
curl -XPOST -d "zone=$zone" -d "status=$1" $bbk_apiurl &> /dev/null
 }

# Populate zone variable etc
usage () { 
cat <<USAGE
How to use: $0 -4 or -6 must be specified.
    -4) Force IPv4 
    -6) Force IPv6
    -z) Set collision zone (1,2,3,4 or 5) to avoid colliding with probes within the same zone.
    -g) Use remote global collision zone for the probe. (Use this if you've configured the zone on your remote server)
Example: $ ./chprobe_bbk -4 -z 1
USAGE
 }

options=':z:46hg'
while getopts $options option
do
    case $option in
        z  ) zone=${OPTARG}     ;;
        g  ) zone=z	  	;;
        4  ) ip_version=4 	;;
	6  ) ip_version=6 	;;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

shift $(($OPTIND - 1))

# Check zone variable and errors
if [ $zone = "1" ] || [ $zone = "2" ] || [ $zone = "3" ] || [ $zone = "4" ] || [ $zone = "5" ] || [ $zone = "z" ]; 
then reinit_status && bs=$(eval $bbk_remotestatusv2)
	if [ $bs -ne 200 ]; then echo "[$logtag] Zone is okay but it seems that we got a bad response, maybe the remote server is down? You should disable the zone for now" | logger -p local5.err && exit 1
	fi
			elif [ $zone = "x" ];then echo "[$logtag] No zone specified, other probes may collide with you" | logger -p notice && bbk_remotestatus=0
			  else
       			   echo "[$logtag] Invalid zone specified - $zone?" && exit 1
fi

# If global zone, then set necessary variables before going further
if [ $zone = "z" ];then echo "[$logtag] Using global zone" | logger -p notice && zone="$(curl -m 3 -s -XGET $globalzone_url)" && 

# Also reintroduce the urls now
reinit_status
fi

# Check if global zone is disabled
if [ $zone = "x" ];then echo "[$logtag] Seems that your global zone is disabled, hope this is what you want" | logger -p notice && bbk_remotestatus=0
fi 

# Informational message
echo "Running tests, look for messages/errors in journal or in your logdir. The test result is saved at /var/log/chprobe_bbk.log"

# Make sure no other test of relevance is running and that our zone is clear before going further
if [ $bbk_remotestatus -eq 1 ] || [ $localstatus -ge 5 ]; then
	while [ $bbk_remotestatus -eq 1 ] || [ $localstatus -ge 5 ]
      	do sleep 1 && echo "[$logtag] sleeping 1sec, reason: [remote: $bbk_remotestatus (zone=$zone). local: $localstatus"] | logger -p notice; done
		elif [ $bbk_remotestatus -eq 0 ] || [ $localstatus -eq 0 ]
                	then echo "[$logtag] Zone should be either clear or disabled ($zone/$bbk_remotestatus) and local status is ok as well, let's continue" | logger -p notice
                        	else echo "[$logtag] Unknown error, state returned: $? and bbk_remotestatus is $bbk_remotestatus" | logger -p notice && exit 1
fi

# Allocate the zone and start the desired test
        case "$ip_version" in
                4)
setzone 1 && sleep 1 &&
bbk_cli --live --quiet | sed -e "s/^/$(date "+%b %d %H:%M:%S") $(hostname -d) $logtag[$(echo $count)]: /" >>/var/log/chprobe_bbk.log &&

# Set zone status to 0 when done
setzone 0
;;
		6)
setzone 1 && sleep 1 &&
bbk_cli --live --quiet --v6 | sed -e "s/^/$(date "+%b %d %H:%M:%S") $(hostname -d) $logtag_ipv6[$(echo $count)]: /" >>/var/log/chprobe_bbk.log &&

# Set zone status to 0 when done
setzone 0
;;

# Return error if ip version isn't specified
		x) echo "-4 or -6 must be specified, aborting" && exit 1
	esac

echo "Done."
