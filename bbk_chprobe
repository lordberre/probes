#!/bin/bash
# Version 2.39.5 (BBK backoffv2) 
# Quick fix for removing null data to not be parsed by logstash. Changed tempfiles dir.

# Dont touch this
zone=x
ip_version=x
multivar=0

# Log related stuff
count=$(( ( RANDOM % 9999 )  + 100 ))
logtag=chprobe_bbk[$(echo $count)]
logtag_ipv6=chprobe_bbk_ipv6[$(echo $count)]
probetimer=5

# For global zone, if you want something else than hostname, then edit below
probename="$(hostname -d)"

# Should the script continue even if remote server is inresponsive? Default is true
force_start=true

# Link to bbk_api
bbk_apiurl="http://project-mayhem.se/probes/bbk_api.php"

# Functions and variables
localstatus="$(pgrep -f 'bbk_cli|tcp_iperf3|iperf3tcp' | wc -l)"
bbk_remotestatusv2="curl --retry 2 -m 3 -s -o /dev/null -w \"%{http_code}\" \$bbk_apiurl"
globalzone_url="http://project-mayhem.se/probes/bbkzone_$probename"

reinit_status () {
localstatus="$(pgrep -f 'bbk_cli|tcp_iperf3|iperf3tcp' | wc -l)"
bbk_remoteurl="http://project-mayhem.se/probes/bbk_status_zone-$zone"
bbk_remotestatus="$(curl --retry 2 -m 3 -s -XGET $bbk_remoteurl)"
 }

# In case two or more tests are executed exactly at the same time, create some random delay
# We only check abscence of bbk daemons, since the iperf3 server will take care of some collisions. It's a different story if more than one server is used in the same zone, this scenario is currently not supported
multiple_bbk () {
if [ $(pgrep -f 'bbk' | wc -l) -ge 3 ] || [ $multivar -eq 1 ]; then        
	if [ $ip_version = "4" ]; then
		if [ $multivar -eq 1 ]; then 
		reinit_status; sleep $[ ( $RANDOM % 20 ) + $probetimer]s; reinit_status
		else
        	reinit_status; sleep $[ ( $RANDOM % 20 ) + 1]s; reinit_status
		fi
              		elif [ $ip_version = "6" ]; then
				if [ $multivar -eq 1 ]; then
              			reinit_status; sleep $[ ( $RANDOM % 30 ) + $probetimer]s; reinit_status
				else
              		reinit_status; sleep $[ ( $RANDOM % 10 ) + 1]s; reinit_status
				fi
        fi
else reinit_status
fi
 }

setzone () { 
if [ $zone = "1" ] || [ $zone = "2" ] || [ $zone = "3" ] || [ $zone = "4" ] || [ $zone = "5" ]; then
curl -m 3 -s --retry 2 -XPOST -d "zone=$zone" -d "status=$1" $bbk_apiurl &> /dev/null && sleep 1
fi
 }

remotelocal_loop () {
reinit_status; multiple_bbk
while [ $bbk_remotestatus -eq 1 ] || [ $localstatus -ge 1 ]
do reinit_status; echo "[$logtag] sleeping 3-$probetimer sec, reason: [remote: $bbk_remotestatus (zone=$zone). local: $localstatus multivar: $multivar]" | logger -p notice && sleep $[ ( $RANDOM % $probetimer ) + 3]s; multiple_bbk; reinit_status
done
 }

usage () { 
cat <<USAGE
How to use: $0 -4 or -6 must be specified.
    -4) Force IPv4 
    -6) Force IPv6
    -z) Set collision zone (1,2,3,4 or 5) to avoid colliding with probes within the same zone.
    -g) Use remote global collision zone for the probe. (Use this if you've configured the zone on your remote server)
Note: When using zones, your test might not start immediately
Example: $ ./chprobe_bbk -4 -z 1
USAGE
 }

options=':z:46hg'
while getopts $options option
do
    case $option in
        z  ) zone=${OPTARG}     ;;
        g  ) zone=z	  	;;
        4  ) ip_version=4 	;;
	6  ) ip_version=6 	;;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

shift $(($OPTIND - 1))

# Check zone variable and errors
if [ $zone = "1" ] || [ $zone = "2" ] || [ $zone = "3" ] || [ $zone = "4" ] || [ $zone = "5" ] || [ $zone = "z" ]; 
then reinit_status; bs=$(eval $bbk_remotestatusv2)
	if [ $bs -ne 200 ]; then echo "[$logtag] It seems that we got a bad response, maybe the remote server is down? You should disable the zone for now. Running test anyway" | logger -p local5.err && zone=x
	else multivar=1 && multiple_bbk
	fi
			elif [ $zone = "x" ];then echo "[$logtag] No zone specified, other probes may collide with you" | logger -p notice && bbk_remotestatus=0
			  else
       			   echo "[$logtag] Invalid zone specified - $zone?" && exit 1
fi

# If global zone, then set necessary variables before going further
if [ $zone = "z" ];then echo "[$logtag] Using global zone" | logger -p notice && zone="$(curl -m 3 --retry 2 -s -XGET $globalzone_url)"; 

# Run the remote check, then use a unique timer to better avoid collisions
ip_url="http://project-mayhem.se/probes/$(hostname -d)_timer.txt"
urlz="curl --retry 2 -m 3 -s -o /dev/null -w \"%{http_code}\" \$ip_url"
urlcheck=$(eval $urlz)

# Use cached ip if remote server is not responding
if [ $urlcheck -ne 200 ]; then probetimer="$(cat /var/chprobe/prober_timer.txt)"
        else probetimer="$(curl -m 3 --retry 2 -s $ip_url)" && curl -m 3 --retry 2 -s -o /var/chprobe/probe_timer.txt $ip_url
fi

# Sleep for a unique time and then reintroduce urls
remotelocal_loop
fi

# Check if global zone is disabled
if [ $zone = "x" ];then echo "[$logtag] Seems that your global zone is disabled, hope this is what you want" | logger -p notice &&

# Change reinit function since we don't care about remote zone anymore
reinit_status () {
localstatus="$(pgrep -f 'bbk_cli|tcp_iperf3|iperf3tcp' | wc -l)"
 }
bbk_remotestatus=0 
reinit_status
fi 

# Informational message
echo "Running tests, look for messages/errors in journal or in your logdir. The test result is saved at /var/log/chprobe_bbk.log"

# Make sure no other test of relevance is running and that our zone is clear before going further
if [ $bbk_remotestatus -eq 1 ] || [ $localstatus -ge 1 ]; then
	remotelocal_loop
		elif [ $bbk_remotestatus -eq 0 ] || [ $localstatus -eq 0 ]
                	then echo "[$logtag] Zone should be either clear or disabled ($zone/$bbk_remotestatus) and local status is ok as well, let's continue" | logger -p notice
                        	else echo "[$logtag] Unknown error, state returned: $? and bbk_remotestatus is $bbk_remotestatus" | logger -p notice
					if [ $force_start = "true" ]
					then echo "[$logtag] Starting test anyway (force_start is set to: $force_start)" | logger -p notice
						else echo "[$logtag] Aborting due to remote server errors. (for debugging: $bbk_remotestatus,$zone,$localstatus,$force_start)" | logger -p local5.err && exit 1
					fi
fi

unique_sleep () {
if [ $zone != "x" ];then 
sleep $(expr $probetimer \* $probetimer / 2 + $probetimer + $probetimer);remotelocal_loop
else remotelocal_loop
fi
}

# Allocate the zone and start the desired test
        case "$ip_version" in
                4)
unique_sleep
setzone 1; echo "[$logtag] Starting bbk_cli [debug: $localstatus | $(pgrep -f 'bbk_cli|tcp_iperf3|iperf3tcp' | wc -l)]" | logger -p notice &&
bbk_cli --live --quiet | sed 's@-1@BBK_ERROR@g' | sed -e "s/^/$(date "+%b %d %H:%M:%S") $(hostname -d) $logtag: /" >>/var/log/chprobe_bbk.log &&

# Set zone status to 0 when done
setzone 0; echo "[$logtag] Finished bbk_cli [debug: $localstatus | $(pgrep -f 'bbk_cli|tcp_iperf3|iperf3tcp' | wc -l)]" | logger -p notice
;;
		6)
unique_sleep
setzone 1; echo "[$logtag_ipv6] Starting bbk_cli [debug: $localstatus | $(pgrep -f 'bbk_cli|tcp_iperf3|iperf3tcp' | wc -l)]" | logger -p notice &&
bbk_cli --live --quiet --v6 | sed 's@-1@BBK_ERROR@g' | sed -e "s/^/$(date "+%b %d %H:%M:%S") $(hostname -d) $logtag_ipv6: /" >>/var/log/chprobe_bbk.log &&

# Set zone status to 0 when done
setzone 0; echo "[$logtag_ipv6] Finished bbk_cli [debug: $localstatus | $(pgrep -f 'bbk_cli|tcp_iperf3|iperf3tcp' | wc -l)]" | logger -p notice
;;

# Return error if ip version isn't specified
		x) echo "-4 or -6 must be specified, aborting" && exit 1
	esac

echo "Done."
