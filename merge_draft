#!/bin/bash
# Version "Merged" alpha
target_tcp="$(curl -s project-mayhem.se/probes/ip-wifi.txt)"
target_udp="$(curl -s project-mayhem.se/probes/ip-udp.txt)"
count=$(( ( RANDOM % 9999 )  + 100 ))
logfacility_tcp=local3.debug
logfacility_udp=local4.debug

# UDP Randomness
arr[0]="5m"
arr[1]="10m"
arr[2]="20m"
rand=$[ $RANDOM % 3 ]

### WiFi settings
iwnic=$(ifconfig | grep wl | awk '{print $1}' | tr -d ':') # Is there a wireless interface?
iwdetect="$(grep up /sys/class/net/wl*/operstate | wc -l)" # Detect wireless interface state
wififreq="$(iw $iwnic link | grep freq | awk '{print $2}')" # Detect frequency (2.4GHz or 5Ghz)
phydetect="$(iw $iwnic link | grep VHT | wc -l)" # What PHY? (Legacy is not supported)
#phy=$1 # Use argument instead

## HT TEMPLATE
htparse="iw \$iwnic station dump | egrep 'tx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$7,\$10,\$11,\$12,\$13}' | tr -d 'MHz' | logger -t tx_linkstats_\$phy[\$(echo \$count)] -p \$logfacility && iw \$iwnic station dump | egrep 'rx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$7,\$10,\$11,\$12,\$13}' | tr -d 'MHz' | logger -t rx_linkstats_\$phy[\$(echo \$count)] -p \$logfacility && iw \$iwnic station dump | egrep 'bytes|packets|retries|failed' | xargs | tr -d 'rx|tx|bytes|packets|retries|failed:' | tr -s ' ' | logger -t iw_counters[\$(echo \$count)] -p \$logfacility"
##

## VHT TEMPLATE
vhtparse="iw \$iwnic station dump | egrep 'tx bitrate|signal:' | xargs | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$15,\$18,\$19,\$20}' | tr -d 'MHz' | logger -t tx_linkstats_\$phy[\$(echo \$count)] -p \$logfacility && iw \$iwnic station dump | egrep 'rx bitrate|signal:' | xargs | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$15,\$18,\$19,\$20}' | tr -d 'MHz' | logger -t rx_linkstats_\$phy[\$(echo \$count)] -p \$logfacility && iw \$iwnic station dump | egrep 'bytes|packets|retries|failed' | xargs | tr -d 'rx|tx|bytes|packets|retries|failed:' | tr -s ' ' | logger -t iw_counters[\$(echo \$count)] -p \$logfacility"
##

# Check if client uses WiFi, if yes, then determine what frequency and PHY.
       if [ $iwdetect -gt 0 ]; then
            if [ $wififreq -lt 2500 ]; then phy=ht;else
                    if [ $phydetect -ge 1 ]; then phy=vht;else phy=ht;fi;fi
            else echo 'No WiFi NIC detected'>/dev/stdout;fi

## Log settings
rrdparse="rrdtool update /home/chprobe/\$protodb_\$(hostname -d).rrd --template \$direction N:\$(tail /var/log/iperf3\$proto.log | egrep \$count | grep iperf3 | awk '{print \$7}')"

## Daemon settings
# run_tcpdaemon="/bin/iperf3 --client \$target_tcp -T \$direction -P 15 -R -w 1m 2>&1 | egrep 'SUM.*rece' | awk '/Mbits\/sec/ {print \$1,\$7}' | tr -d ':' | logger -t iperf3tcp[\$(echo \$count)] -p \$logfacility_tcp"

run_tcpdaemon="/bin/iperf3 --client \$target -T \$direction -P 15 -R -w 1m 2>&1 | egrep 'SUM.*rece' | awk '/Mbits\\/sec/ {print \$1,\$7}' | tr -d ':' | logger -t iperf3tcp[\$(echo \$count)] -p \$logfacility"

run_udpdaemon="/usr/bin/iperf3 --client \$target -u -T \$direction -R -b \${arr[\$rand]} -t 60 | egrep 'iperf Done' -B 3 | egrep 0.00-60.00 | awk '{print \$1,\$6,\$8,\$10,\$13,\$14.\$15,\$16,\$17,\$18}' | tr -d '(%)|:' | logger -t iperf3udp[\$(echo \$count)] -p \$logfacility_udp"


while true
do
	case "$1" in
		-elastic)
		       logstash_enabled=true	;;
		-rrd)
		      rrd_enabled=true ;;

        	 -t) proto=tcp

case "$(pgrep -f "iperf3 --client" | wc -w)" in

0)  echo "[chprobe_iperf3] Let's see if we can start the tcp daemon" | logger -p info	
      	while iperf3 -c $target_tcp -t 1 | grep busy; do sleep $[ ( $RANDOM % 5 ) + 3]s  && echo '[chprobe_iperf3] waiting cuz server is busy' | logger -p info;done
    echo "[chprobe_iperf3] Starting the tcp daemon - downstream" | logger -p info
$run_tcpdaemon & if [ $phy=vht ];then $vhtparse;if $phy=ht; then $htparse;fi;fi & if [ $rrd_enabled=true ]; then "| $rrdparse";fi
    ;;
1)  echo "[chprobe_iperf3] iperf tcp daemon is already running" | logger -p info
    while pgrep -f "iperf3 --client" | wc -w | grep 1; do sleep $[ ( $RANDOM % 5 ) + 3]s && echo '[chprobe_iperf3] waiting cuz a daemon is running' | logger -p info;done
    echo "[chprobe_iperf3] Starting the tcp daemon - downstream"
$run_tcpdaemon & if [ $phy=vht ];then $vhtparse;if $phy=ht; then $htparse;fi;fi & if [ $rrd_enabled=true ]; then "| $rrdparse";fi
    ;;
*)  echo "[chprobe_iperf3] multiple instances of iperf udp daemon running. Stopping & restarting iperf:" | logger -p info
    kill $(pgrep -f "iperf3 --client" | awk '{print $1}')
    ;;
esac;
	;;
		-u) proto=udp

case "$(pgrep -f "iperf3 --client" | wc -w)" in

0)  echo "[chprobe_iperf3] Let's see if we can start the udp daemon" | logger -p info
    while iperf3 -c $target -t 1 | grep busy; do sleep $[ ( $RANDOM % 10 ) + 3]s && echo '[chprobe_iperf3] waiting cuz server is busy' | logger -p info;done
    echo "[chprobe_iperf3] udp daemon started - downstream" | logger -p info
$run_tcpdaemon & if [ $phy=vht ];then $vhtparse;if $phy=ht; then $htparse;fi;fi & if [ $rrd_enabled=true ]; then "| $rrdparse";fi
    ;;
1)  echo "[chprobe_iperf3] iperf daemon already running" | logger -p info
    while pgrep -f "iperf3 --client" | wc -w | grep 1; do sleep $[ ( $RANDOM % 10 ) + 3]s && echo '[chprobe_iperf3] waiting cuz a daemon is running' | logger -p info;done
    echo "[chprobe_iperf3] udp daemon started - downstream" | logger -p info
$run_tcpdaemon & if [ $phy=vht ];then $vhtparse;if $phy=ht; then $htparse;fi;fi & if [ $rrd_enabled=true ]; then "| $rrdparse";fi
;;
*)  echo "[chprobe_iperf3] multiple instances of iperf udp daemon running. Stopping & restarting iperf:" | logger -p info
    kill $(pgrep -f "iperf3 --client" | awk '{print $1}')
    ;;
esac;
	;;
			        -h)  cat <<USAGE
usage: $0 [-t] [-u] [-w] [-h] args

    -h) See help
    -t) TCP (Bidirectional TCP test, 15 parallel sessions, 1MB window size)
    -u) UDP (Bidirectional jitter,loss with 3x different bitrates: 5m,10m and 20m)
    --rrd) Put data in rrd database
    --logstash) Parse data for logstash
USAGE
            exit 1
            ;;
        *)
            echo Use -h for help!
            break;
            ;;
    esac

    shift       # toss current $1; we're done with it now
done

for p in "$@"
do
    echo "Non-option argument: '$p'"
done
